plugins {
    id 'java'
    id 'war'
    id 'eclipse-wtp'     
}

group = 'kspo'
version = '1.0.0'
archivesBaseName = 'zzzzzzz'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'


// 프로필 구분 
// -Pprofile=dev
def profile = (findProperty('profile')
        ?: System.getenv('SPRING_PROFILES_ACTIVE')
        ?: System.getProperty('spring.profiles.active')
        ?: 'local').toLowerCase() 
def web_file = profile == 'local' ? 'web.xml' : "web-${profile}.xml" 
def log_file = profile == 'local' ? 'log4j2.xml' : "log4j2-${profile}.xml"
def branch_dir = profile == 'local' ? 'dev' : profile
def naxalicence_file = profile == 'local' ? 'nexacro_server_licence17.xml' : "nexacro_server_licence17-${profile}.xml" 

println "Environment is ==> $profile"

repositories {
	
maven {
        url = uri("https://maven.egovframe.go.kr/maven/")
        allowInsecureProtocol = true
        metadataSources {
            mavenPom()
            artifact()
        }
    }
	mavenCentral()
}

sourceSets {
    main {
    	java{
    		srcDirs = ['src']
            include '**/*.java'
    	}
        resources {
            srcDirs = ['src']
            include '**/*.xml', '**/*.properties', '**/*.yml', '**/*.yaml', '**/*.sql'
            //exclude '**/dev/**', '**/prod/**', '**/log4j2*.xml'
            if ("${branch_dir}" == 'prod' ) exclude '**/dev/**'
            else exclude '**/prod/**'
            exclude '**/log4j2*.xml'
        }
    }
}

ext {
    springVer        = '4.3.25.RELEASE'
    springSecVer     = '4.2.13.RELEASE'
    mybatisVer       = '3.4.6'
    mybatisSpringVer = '1.3.2'
    quartzVer        = '2.3.2'
    poiVer           = '3.16'
    slf4jVer         = '1.7.30'
    log4j2Ver        = '2.17.2'     // 기존 2.14.2 → 보안관점 업그레이드 권장
    jacksonVer       = '2.6.1'      // 현재 버전 유지(향후 업그레이드 권장)
    egovVer          = '3.10.0'     // eGovFrame 사용 버전  
}


// dependencies 적용 
apply from: "gradle/dependencies-common.gradle"

// profile dependencies
if (profile == 'local') {
    dependencies {
        implementation 'com.h2database:h2:2.2.224'
        //implementation 'ch.qos.logback:logback-classic:1.2.13'
        //implementation 'ch.qos.logback:logback-core:1.2.13'
    }
} else {
    apply from: "gradle/dependencies-${profile}.gradle"
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def askedWar = gradle.startParameter.taskNames.any { it == 'war' || it.endsWith(':war') } \
               || project.hasProperty('withWar')

// 기본 war 태스크는 기본적으로 비활성화, 직접 요청 시에만 실행
tasks.named('war') {
    enabled = askedWar       // 아예 스케줄에서 제외
    onlyIf { askedWar }      // 혹시 모를 실행도 한 번 더 차단
}


war {
	webAppDirName = 'WebContent'
	destinationDirectory.set(file("./build/")) // war 파일 경로 지정 .. default => build/libs
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	exclude '**/web*.xml'

	// log4j2
	from('src') {
		include "${log_file}"
		rename { "log4j2.xml" }
		into "WEB-INF/classes/"
	}
	
	// licence
	from('src/licence') {
		include "${naxalicence_file}"
		rename { "nexacro_server_licence17.xml" }
		into "WEB-INF/classes/"
	}
	
	// web
    webXml = file("WebContent/WEB-INF/${web_file}")	
}


